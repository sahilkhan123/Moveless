from collections import defaultdict, Counter

import networkx as nx




def interaction_graph_from_file(file_name):
    """
        file_name is a file of type generated by circuit_to_graph.py
        returns a NetworkX Graph
    """
    G = nx.Graph()

    with open(file_name, 'r') as f:
        for line in f.readlines():
            if line[0] != "#":
                l = line.strip().split()
                G.add_edge(int(l[0]), int(l[1]), weight=int(l[2]))

    return G

def moment_graphs_from_file(file_name):
    """
        file_name is a file of type generated by circuit_to_graph.py
        returns a list of NetworkX Graphs
    """
    all_graphs = []

    vertex_list = set()
    with open(file_name, 'r') as f:
        for line in f.readlines():
            if line[0] != "#":
                l = line.strip().split()
                vertex_list.add(int(l[0]))
                vertex_list.add(int(l[1]))
        f.seek(0)
        G = None
        for line in f.readlines():
            if line[0] == '#':
                if G is not None and len(G.edges) > 0:
                    all_graphs.append(G)
                G = nx.Graph()
                for v in vertex_list:
                    G.add_node(v)
            else:
                l = line.strip().split()
                G.add_edge(int(l[0]), int(l[1]), weight=1)

        if G is not None and len(G.edges) > 0:
            all_graphs.append(G)

    return all_graphs

def union_moment(g, h):
    """
        Input: g, h are NetworkX Graphs with the same set of vertices
        Returns: a new graph with the edges of both g and h
    """
    temp_graph = defaultdict(int)
    g_weights = nx.get_edge_attributes(g, 'weight')
    h_weights = nx.get_edge_attributes(h, 'weight')

    for e in g.edges:
        temp_graph[e] += g_weights[e]
    for e in h.edges:
        temp_graph[e] += h_weights[e]

    new_g = nx.Graph()
    for v in g:
        new_g.add_node(v)
    for e in temp_graph:
        new_g.add_edge(e[0], e[1], weight=temp_graph[e])

    return new_g

def union_range(graphs):
    """
        Input: A list of NetworkX Graphs with the same set of vertices
        Return: the union_moment of all of these graphs
    """
    g = graphs[0]
    for m in graphs[1:]:
        g = union_moment(g, m)

    return g

def add_graphs(graphs, i_range=None, nodes=None):
    if i_range is None:
        graphs_iter = lambda: graphs
        i_range = range(len(graphs))
    else:
        graphs_iter = lambda: (graphs[i] for i in i_range)
    if nodes is None:
        nodes = set()
        for g in graphs_iter():
            nodes.update(g.nodes)

    out_weights = Counter()
    for g in graphs_iter():
        out_weights += nx.get_edge_attributes(g, 'weight')

    out_graph = nx.Graph()
    out_graph.add_nodes_from(nodes)
    out_graph.add_edges_from((u, v, {'weight':w})
                             for (u, v), w in out_weights.items())
    return out_graph
